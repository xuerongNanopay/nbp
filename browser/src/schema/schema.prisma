// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//status enum('active', 'awaitVerify', 'suspend', 'delete') default 'awaitEmailConfirm',
enum LoginStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

model Login {
  id     Int         @id @default(autoincrement())
  status LoginStatus @default(AWAIT_VERIFY)

  email        String    @unique
  password     String
  verifyCode   String?
  verifyCodeAt DateTime?

  recoverToken         String?
  recoverTokenExpireAt DateTime?
  lastLoginAt          DateTime?

  owner   User? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("login")
}

enum UserStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

enum UserRole {
  ADMIN      @map("admin")
  NBP_CLIENT @map("nbp_client")
}

model User {
  id     Int        @id @default(autoincrement())
  status UserStatus @default(ACTIVE)
  role   UserRole   @default(NBP_CLIENT)

  firstName   String
  middleName  String?
  lastName    String
  dob         DateTime
  address1    String
  address2    String?
  province    String
  country     String
  postCode    String
  phoneNumber String

  pob         String
  nationality String

  occupationId Int
  avatarUrl    String

  Login          Login[] // only support one way login
  Identification Identification[]
  Account        Account[]
  Contact        Contact[]
  // SummaryTransaction SummaryTransaction[]
  // Transaction        Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

enum IdentificationStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

enum IdentificationType {
  PASSWORD       @map("password")
  DRIVER_LICENSE @map("driver_license")
  PROVINCAL_ID   @map("provincial_id")
  NATIONAL_ID    @map("national_id")
}

model Identification {
  id     Int                  @id @default(autoincrement())
  status IdentificationStatus @default(ACTIVE)
  type   IdentificationType

  num          String
  additionInfo String @map("addition_info")

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("identification")
}

enum PersonalRelationshipStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model PersonalRelationship {
  id     Int                        @id @default(autoincrement())
  status PersonalRelationshipStatus @default(ACTIVE)

  type        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personal_relationship")
}

enum OccupationStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Occupation {
  id     Int              @id @default(autoincrement())
  status OccupationStatus @default(ACTIVE)

  type        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("occupation")
}

enum CurrencyStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Currency {
  id     Int            @id @default(autoincrement())
  status CurrencyStatus @default(ACTIVE)

  isoCode String @unique
  numCode String @unique
  decimal Int
  name    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currency")
}

enum CountryStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Country {
  id     Int           @id @default(autoincrement())
  status CountryStatus @default(ACTIVE)

  iso2Code String @unique
  iso3Code String @unique
  numCode  String @unique
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("country")
}

enum RegionStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Region {
  id     Int          @id @default(autoincrement())
  status RegionStatus @default(ACTIVE)

  isoCode String @unique
  name    String
  abbr    String
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("region")
}

enum InstitutionStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Institution {
  id     Int               @id @default(autoincrement())
  status InstitutionStatus @default(ACTIVE)

  country        String
  abbr           String
  name           String
  institutionNum String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("institution")
}

enum AccountStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
  INVALID      @map("invalid")
}

enum AccountType {
  INTERACT     @map("interac")
  BANK_ACCOUNT @map("bank_account")
}

model Account {
  id     Int           @id @default(autoincrement())
  status AccountStatus @default(AWAIT_VERIFY)
  type   AccountType

  email     String
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
  // Transaction Transaction[]

  @@map("account")
}

enum ContactStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
  INVALID      @map("invalid")
}

enum ContactType {
  CASH_PICKUP  @map("cash_pickup")
  BANK_ACCOUNT @map("bank_account")
}

model Contact {
  id     Int           @id @default(autoincrement())
  status ContactStatus @default(ACTIVE)
  type   ContactType

  firstName   String
  middleName  String?
  lastName    String
  address1    String
  address2    String?
  province    String
  country     String
  postCode    String
  phoneNumber String

  dob                 DateTime
  relationshipToOwner String

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
  // Transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}
