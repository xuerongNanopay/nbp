// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//status enum('active', 'awaitVerify', 'suspend', 'delete') default 'awaitEmailConfirm',
enum LoginStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

model Login {
  id     Int         @id @default(autoincrement())
  status LoginStatus @default(AWAIT_VERIFY)

  email        String    @unique
  password     String
  verifyCode   String?
  verifyCodeAt DateTime?

  recoverToken         String?
  recoverTokenExpireAt DateTime?
  lastLoginAt          DateTime?

  owner   User? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("login")
}

enum UserStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

enum UserRole {
  ADMIN      @map("admin")
  NBP_CLIENT @map("nbp_client")
}

model User {
  id     Int        @id @default(autoincrement())
  status UserStatus @default(ACTIVE)
  role   UserRole   @default(NBP_CLIENT)

  firstName    String
  middleName   String?
  lastName     String
  dob          DateTime
  address1     String
  address2     String?
  city         String
  provinceCode String   @db.Char(5)
  province     Region   @relation(fields: [provinceCode], references: [isoCode])
  countryCode  String   @db.Char(2)
  country      Country  @relation(fields: [countryCode], references: [iso2Code])
  postalCode   String
  phoneNumber  String

  pob         String
  nationality String

  occupationId Int
  occupation   Occupation @relation(fields: [occupationId], references: [id])
  avatarUrl    String?

  logins         Login[]
  identification Identification?
  accounts       Account[]
  contacts       Contact[]
  transactions   Transaction[]
  // transactions        Transaction[]
  notifications  Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

enum IdentificationStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
}

enum IdentificationType {
  PASSPORT       @map("passport")
  DRIVER_LICENSE @map("driver_license")
  PROVINCAL_ID   @map("provincial_id")
  NATIONAL_ID    @map("national_id")
}

model Identification {
  id     Int                  @id @default(autoincrement())
  status IdentificationStatus @default(ACTIVE)
  type   IdentificationType

  value        String
  additionInfo String? @map("addition_info")

  ownerId Int  @unique
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("identification")
}

enum PersonalRelationshipStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model PersonalRelationship {
  id     Int                        @id @default(autoincrement())
  status PersonalRelationshipStatus @default(ACTIVE)

  type        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts Contact[]

  @@map("personal_relationship")
}

enum OccupationStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Occupation {
  id     Int              @id @default(autoincrement())
  status OccupationStatus @default(ACTIVE)

  type        String
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("occupation")
}

enum CurrencyStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Currency {
  id     Int            @id @default(autoincrement())
  status CurrencyStatus @default(ACTIVE)

  isoCode String @unique
  numCode String @unique
  decimal Int
  name    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currency")
}

enum CountryStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Country {
  id     Int           @id @default(autoincrement())
  status CountryStatus @default(ACTIVE)

  iso2Code String    @unique
  iso3Code String    @unique
  numCode  String    @unique
  name     String
  contacts Contact[]
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("country")
}

enum RegionStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Region {
  id     Int          @id @default(autoincrement())
  status RegionStatus @default(ACTIVE)

  isoCode  String    @unique
  name     String
  abbr     String
  country  String
  contacts Contact[]
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("region")
}

enum InstitutionStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Institution {
  id     Int               @id @default(autoincrement())
  status InstitutionStatus @default(ACTIVE)

  country        String
  abbr           String
  name           String
  institutionNum String?
  contacts       Contact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("institution")
}

enum AccountStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
  INVALID      @map("invalid")
}

enum AccountType {
  INTERAC      @map("interac")
  BANK_ACCOUNT @map("bank_account")
}

model Account {
  id     Int           @id @default(autoincrement())
  status AccountStatus @default(AWAIT_VERIFY)
  type   AccountType

  email     String
  isDefault Boolean @default(false)
  currency  String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      Int
  transactions Transaction[]
  cashIns      CashIn[]

  @@map("account")
}

enum ContactStatus {
  ACTIVE       @map("active")
  AWAIT_VERIFY @map("await_verify")
  SUSPEND      @map("suspend")
  DELETE       @map("delete")
  INVALID      @map("invalid")
}

enum ContactType {
  CASH_PICKUP  @map("cash_pickup")
  BANK_ACCOUNT @map("bank_account")
}

model Contact {
  id     Int           @id @default(autoincrement())
  status ContactStatus @default(ACTIVE)
  type   ContactType

  firstName    String
  middleName   String?
  lastName     String
  address1     String
  address2     String?
  provinceCode String  @db.Char(5)
  province     Region  @relation(fields: [provinceCode], references: [isoCode])
  city         String
  countryCode  String  @db.Char(2)
  country      Country @relation(fields: [countryCode], references: [iso2Code])
  postCode     String?
  phoneNumber  String?

  institutionId  Int?
  institution    Institution? @relation(fields: [institutionId], references: [id])
  bankAccountNum String?
  branchNum      String?
  iban           String?
  currency       String

  relationshipId Int?
  relationship   PersonalRelationship? @relation(fields: [relationshipId], references: [id])

  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      Int
  transactions Transaction[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("contact")
}

model CurrencyRate {
  id                  Int    @id @default(autoincrement())
  provider            String
  sourceCurrency      String @db.Char(3)
  destinationCurrency String @db.Char(3)
  value               Float  @db.Double

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currency_rate")
}

model FeeDetail {
  id   Int    @id @default(autoincrement())
  name String

  description String?
  amount      Int
  currency    String  @db.Char(3)

  ownerId       Int
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fee_detail")
}

enum CashInMethod {
  INTERAC @map("interac")
}

enum CashInStatus {
  INITIAL @map("initial")
  WAIT    @map("wait")
  PAID    @map("paid")
}

model CashIn {
  id     Int          @id @default(autoincrement())
  status CashInStatus @default(INITIAL)
  method CashInMethod

  externalRef String?
  paymentLink String?

  ownerId          Int
  paymentAccountId Int
  paymentAccount   Account     @relation(fields: [paymentAccountId], references: [id])
  transactionId    Int         @unique
  transaction      Transaction @relation(fields: [transactionId], references: [id])

  cashInReceiveAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("cash_in")
}

enum TransactionStatus {
  QUOTE               @map("quote")
  INITIAL             @map("initial")
  WAITING_FOR_PAYMENT @map("waiting_for_payment")
  PROCESS             @map("process")
  COMPLETE            @map("complete")
  REJECT              @map("reject")
  CANCEL              @map("cancel")
  REFUND_IN_PROGRESS  @map("refund_in_progress")
  REFUND              @map("refund")
}

model Transaction {
  id     Int               @id @default(autoincrement())
  name   String
  status TransactionStatus @default(QUOTE)

  sourceAccountId      Int
  sourceAccount        Account @relation(fields: [sourceAccountId], references: [id])
  destinationContactId Int
  destinationContact   Contact @relation(fields: [destinationContactId], references: [id])

  sourceAmount   Int
  sourceCurrency String @db.Char(3)

  destinationAmount   Int
  destinationCurrency String @db.Char(3)
  destinationName     String

  feeAmount   Int
  feeCurrency String @db.Char(3)

  debitAmount   Int
  debitCurrency String @db.Char(3)

  fromIp     String?
  deviceType String?

  ownerId Int
  owner   User    @relation(fields: [ownerId], references: [id])
  cashIn  CashIn?

  endInfo String?

  confirmQuoteAt DateTime?
  quoteExpired   DateTime
  completedAt    DateTime?
  failedAt       DateTime?
  refundedAt     DateTime?

  fees      FeeDetail[]
  transfers Transfer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}

enum TransferStatus {
  INITIAL  @map("initial")
  WAIT     @map("wait")
  COMPLETE @map("complete")
  FAIL     @map("failed")
  RETRY    @map("retry")
  CANCEL   @map("cancel")
}

model Transfer {
  id                Int            @id @default(autoincrement())
  name              String
  status            TransferStatus @default(INITIAL)
  externalReference String?

  retryAttempt Int @default(0)

  ownerId       Int
  nexTransferId Int?

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  waitAt     DateTime?
  completeAt DateTime?
  failAt     DateTime?
  cancelAt   DateTime?
  endInfo    String?

  nextId Int?      @unique
  next   Transfer? @relation("TransferChain", fields: [nextId], references: [id])
  pre    Transfer? @relation("TransferChain")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transfer")
}

enum NotificationStatus {
  READ    @map("read")
  UN_READ @map("un_read")
}

enum NotificationLevel {
  INFO  @map("info")
  WARM  @map("warm")
  ERROR @map("error")
}

model Notification {
  id     Int                @id @default(autoincrement())
  status NotificationStatus @default(UN_READ)
  level  NotificationLevel  @default(INFO)

  subject String
  content String

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("notification")
}
