// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum LifeCycleStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
  PENDING @map("pending")
  DELETE  @map("delete")
}

enum LogLevel {
  DEBUG   @map("debug")
  INFO    @map("info")
  WARMING @map("warming")
  ERROR   @map("error")
}

model Login {
  id                   Int             @id @default(autoincrement())
  owner                User            @relation(fields: [ownerId], references: [id])
  ownerId              Int
  email                String          @unique
  password             String
  verifyCode           String?
  verifyCodeAt         DateTime?
  isEmailLoginVerified Boolean         @default(false)
  status               LifeCycleStatus @default(PENDING)

  retrieveToken         String?
  retrieveTokenExpireAt DateTime?
  lastLoginAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("login")
}

model User {
  id Int @id @default(autoincrement())

  firstName   String
  middleName  String?
  lastName    String
  dob         DateTime
  address1    String
  address2    String?
  province    String
  country     String
  postCode    String
  phoneNumber String
  pob         String
  nationality String
  Login       Login[] // only support one way login

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Identification     Identification[]
  Account            Account[]
  Contact            Contact[]
  SummaryTransaction SummaryTransaction[]
  Transaction        Transaction[]

  @@map("user")
}

model Identification {
  id      Int    @id @default(autoincrement())
  ownerId Int
  owner   User   @relation(fields: [ownerId], references: [id])
  type    String
  num     String

  status LifeCycleStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("identification")
}

model PersonalRelationship {
  id          Int             @id @default(autoincrement())
  type        String
  description String?
  status      LifeCycleStatus @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("personal_relationship")
}

model Currency {
  id        Int             @id @default(autoincrement())
  isoCode   String          @unique
  numCode   String          @unique
  decimal   Int
  name      String
  status    LifeCycleStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("currency")
}

model Country {
  id        Int             @id @default(autoincrement())
  iso2Code  String          @unique
  iso3Code  String          @unique
  numCode   String          @unique
  name      String
  status    LifeCycleStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("country")
}

model Region {
  id        Int             @id @default(autoincrement())
  isoCode   String          @unique
  name      String
  abbr      String
  country   String
  status    LifeCycleStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("region")
}

model Institution {
  id             Int             @id @default(autoincrement())
  country        String
  abbr           String
  name           String
  institutionNum String
  status         LifeCycleStatus @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("institution")
}

model Occupation {
  id          Int             @id @default(autoincrement())
  type        String
  description String?
  status      LifeCycleStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("occupation")
}

// create table notification(
//     id serial primary key,
//     ownerId int not null references user(id),
//     level enum('info', 'warming', 'error', 'debug') default 'info',
//     subject varchar(250) null,
//     content varchar(250) null,
//     status enum('read', 'unread') default 'unread',
//     createdAt timestamp default current_timestamp,
//     updatedAt timestamp default current_timestamp on update current_timestamp
// );

enum NotificationStatus {
  READ   @map("read")
  UNREAD @map("unread")
}

model Notification {
  id      Int                @id @default(autoincrement())
  ownerId Int
  level   LogLevel           @default(INFO)
  subject String
  content String
  status  NotificationStatus @default(UNREAD)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification")
}

enum AccountType {
  INTERAC     @map("interac")
  BANKACCOUNT @map("bankAccount")
}

//status enum('active', 'pending', 'disable', 'invalid', 'delete') default 'active',
enum AccountStatus {
  ACTIVE  @map("active")
  PENDING @map("pending")
  DISABLE @map("disable")
  INVALID @map("invalid")
  DELETE  @map("delete")
}

// TODO: using split to different table?
model Account {
  id      Int  @id @default(autoincrement())
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  interacEmail String
  isDefault    Boolean @default(false)

  status    AccountStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("account")
}

enum ContactStatus {
  ACTIVE  @map("active")
  PENDING @map("pending")
  DISABLE @map("disable")
  INVALID @map("invalid")
  DELETE  @map("delete")
}

model Contact {
  id      Int  @id @default(autoincrement())
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  firstName           String
  middleName          String?
  lastName            String
  dob                 DateTime
  address1            String
  address2            String?
  province            String
  country             String
  postCode            String
  phoneNumber         String
  relationshipToOwner String

  status    ContactStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("contact")
}

model ApiLog {
  id         Int  @id @default(autoincrement())
  ownerId    Int
  transferId Int?

  provider         String
  apiName          String
  requestPayload   String?
  responsePayload  String?
  httpResponseCode Int
  errorMessage     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_log")
}

    // errorMessage varchar(255) null,
    // sourceAccount int not null references account(id),
    // destinationAccount int not null references contact(id),
    // sourceAmount INTEGER not null,
    // destinationAmount INTEGER not null,
    // sourceCurrency varchar(8) not null references currency(isoCode),
    // destinationCurrency varchar(8) not null references currency(isoCode),
    // fee Integer null,
    // feeCurrency varchar(8) not null references currency(isoCode),
    // debitAmount Integer not null,
    // debitCurrency varchar(8) not null references currency(isoCode),
    // nbpReference varchar(100),

    // # intial process success failed pending cancel.
    // status enum('initial','waitingForPayment', 'process', 'complete', 'failed', 'refundInProgress', 'cancel') default 'initial',
enum SummaryTransactionStatus {
  INITIAL @map("initial")
  WAITING_FOR_PAYMENT @map("waitingForPayment")
  PROCESS @map("process")
  COMPLETE @map("complete")
  FAILED @map("failed")
  REFUND_IN_PROGRESS @map("refundInProgress")
  CANCEL @map("cancel")
}

model SummaryTransaction {
  id      Int  @id @default(autoincrement())
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
  transactionId Int @unique
  transaction Transaction @relation(fields: [transactionId], references: [id])

  sourceAccountId Int
  destinationContactId Int
  sourceAccountSummary String?
  destinationContactSummary String?
  senderName String?
  receiverName String?
  sourceAmount Int
  destinationAmount Int
  sourceCurrency String
  destinationCurrency String
  fee Int
  feeCurrency String
  debitAmount Int
  debitCurrency String
  nbpReference String
  errorMessage String?

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("summary_transaction")
}

model Transaction {
  id      Int  @id @default(autoincrement())
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
  summaryTransaction SummaryTransaction?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  transfer  transfer[]

  @@map("transaction")
}

model transfer {
  id            Int         @id @default(autoincrement())
  ownerId       Int
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transfer")
}
